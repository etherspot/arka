/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { ACL, ACLInterface } from "../../../src/access/ACL";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newGuardian",
        type: "address",
      },
    ],
    name: "GuardianAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "removedGuardian",
        type: "address",
      },
    ],
    name: "GuardianRemoved",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnerAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "removedOwner",
        type: "address",
      },
    ],
    name: "OwnerRemoved",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newGuardian",
        type: "address",
      },
    ],
    name: "addGuardian",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "addOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "isGuardian",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "isOwner",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_guardian",
        type: "address",
      },
    ],
    name: "removeGuardian",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
    ],
    name: "removeOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e13806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630c68ba2114610067578063173825d9146100975780632f54bf6e146100b35780637065cb48146100e357806371404156146100ff578063a526d83b1461011b575b600080fd5b610081600480360381019061007c91906109df565b610137565b60405161008e9190610a27565b60405180910390f35b6100b160048036038101906100ac91906109df565b61018d565b005b6100cd60048036038101906100c891906109df565b610227565b6040516100da9190610a27565b60405180910390f35b6100fd60048036038101906100f891906109df565b61027c565b005b610119600480360381019061011491906109df565b610316565b005b610135600480360381019061013091906109df565b6103a0565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b61019633610227565b806101cc57503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806101dc57506101db33610137565b5b61021b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021290610a9f565b60405180910390fd5b6102248161042a565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff169050919050565b61028533610227565b806102bb57503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806102cb57506102ca33610137565b5b61030a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030190610a9f565b60405180910390fd5b610313816105b4565b50565b61031f33610227565b8061035557503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b610394576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038b90610b0b565b60405180910390fd5b61039d816106d1565b50565b6103a933610227565b806103df57503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61041e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041590610b0b565b60405180910390fd5b610427816107ef565b50565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048f90610b77565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610523576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051a90610be3565b60405180910390fd5b7f58619076adf5bb0943d100ef88d52d7c3fd691b19d3a9071b555b651fbf418da816040516105529190610c12565b60405180910390a160008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b6000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615610640576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063790610c79565b60405180910390fd5b7f994a936646fe87ffe4f1e469d3d6aa417d6b855598397f323de5b449f765f0c38160405161066f9190610c12565b60405180910390a160016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661075d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075490610ce5565b60405180910390fd5b7fb8107d0c6b40be480ce3172ee66ba6d64b71f6b1685a851340036e6e2e3e3c528160405161078c9190610c12565b60405180910390a16000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361085e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085590610d51565b60405180910390fd5b600160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16156108eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e290610dbd565b60405180910390fd5b7f038596bb31e2e7d3d9f184d4c98b310103f6d7f5830e5eec32bffe6f1728f9698160405161091a9190610c12565b60405180910390a160018060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109ac82610981565b9050919050565b6109bc816109a1565b81146109c757600080fd5b50565b6000813590506109d9816109b3565b92915050565b6000602082840312156109f5576109f461097c565b5b6000610a03848285016109ca565b91505092915050565b60008115159050919050565b610a2181610a0c565b82525050565b6000602082019050610a3c6000830184610a18565b92915050565b600082825260208201905092915050565b7f41434c3a3a206f6e6c79206f776e6572206f7220677561726469616e00000000600082015250565b6000610a89601c83610a42565b9150610a9482610a53565b602082019050919050565b60006020820190508181036000830152610ab881610a7c565b9050919050565b7f41434c3a3a206f6e6c79206f776e657200000000000000000000000000000000600082015250565b6000610af5601083610a42565b9150610b0082610abf565b602082019050919050565b60006020820190508181036000830152610b2481610ae8565b9050919050565b7f41434c3a3a2072656d6f76696e672073656c6600000000000000000000000000600082015250565b6000610b61601383610a42565b9150610b6c82610b2b565b602082019050919050565b60006020820190508181036000830152610b9081610b54565b9050919050565b7f41434c3a3a206e6f6e2d6578697374616e74206f776e65720000000000000000600082015250565b6000610bcd601883610a42565b9150610bd882610b97565b602082019050919050565b60006020820190508181036000830152610bfc81610bc0565b9050919050565b610c0c816109a1565b82525050565b6000602082019050610c276000830184610c03565b92915050565b7f41434c3a3a20616c7265616479206f776e657200000000000000000000000000600082015250565b6000610c63601383610a42565b9150610c6e82610c2d565b602082019050919050565b60006020820190508181036000830152610c9281610c56565b9050919050565b7f41434c3a3a206e6f6e2d6578697374616e7420677561726469616e0000000000600082015250565b6000610ccf601b83610a42565b9150610cda82610c99565b602082019050919050565b60006020820190508181036000830152610cfe81610cc2565b9050919050565b7f41434c3a3a207a65726f20616464726573730000000000000000000000000000600082015250565b6000610d3b601283610a42565b9150610d4682610d05565b602082019050919050565b60006020820190508181036000830152610d6a81610d2e565b9050919050565b7f41434c3a3a20616c726561647920677561726469616e00000000000000000000600082015250565b6000610da7601683610a42565b9150610db282610d71565b602082019050919050565b60006020820190508181036000830152610dd681610d9a565b905091905056fea2646970667358221220c823f32a1d114ec5f696c04168ef2deec33510c3ff48f919b9b4e23744e0a45564736f6c63430008110033";

type ACLConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ACLConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ACL__factory extends ContractFactory {
  constructor(...args: ACLConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ACL> {
    return super.deploy(overrides || {}) as Promise<ACL>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ACL {
    return super.attach(address) as ACL;
  }
  override connect(signer: Signer): ACL__factory {
    return super.connect(signer) as ACL__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ACLInterface {
    return new utils.Interface(_abi) as ACLInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ACL {
    return new Contract(address, _abi, signerOrProvider) as ACL;
  }
}
