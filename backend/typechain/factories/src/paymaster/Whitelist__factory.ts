/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Whitelist,
  WhitelistInterface,
} from "../../../src/paymaster/Whitelist";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "paymaster",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
    ],
    name: "AddedBatchToWhitelist",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "paymaster",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddedToWhitelist",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "paymaster",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
    ],
    name: "RemovedBatchFromWhitelist",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "paymaster",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "RemovedFromWhitelist",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "WhitelistInitialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "add",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_accounts",
        type: "address[]",
      },
    ],
    name: "addBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_sponsor",
        type: "address",
      },
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "check",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_account",
        type: "address",
      },
    ],
    name: "remove",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_accounts",
        type: "address[]",
      },
    ],
    name: "removeBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whitelist",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610fb58061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063715018a611610066578063715018a6146101085780638da5cb5b14610112578063b092145e14610130578063b3154db014610160578063f2fde38b1461019057610093565b80630a3b0a4f1461009857806324efa264146100b457806329092d0e146100d05780636b845bfe146100ec575b600080fd5b6100b260048036038101906100ad91906109db565b6101ac565b005b6100ce60048036038101906100c99190610a6d565b610212565b005b6100ea60048036038101906100e591906109db565b61027b565b005b61010660048036038101906101019190610a6d565b6102e1565b005b61011061034a565b005b61011a61035e565b6040516101279190610ac9565b60405180910390f35b61014a60048036038101906101459190610ae4565b610387565b6040516101579190610b3f565b60405180910390f35b61017a60048036038101906101759190610ae4565b6103b6565b6040516101879190610b3f565b60405180910390f35b6101aa60048036038101906101a591906109db565b6103ca565b005b6101b58161044d565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f0c4b48e75a1f7ab0a9a2f786b5d6c1f7789020403bff177fb54d46edb89ccc0060405160405180910390a350565b61021c828261059d565b818160405161022c929190610c17565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff167f6eabb183ad4385932735ae89018089a008c58e814451b618bc0dd0e7922f6d1360405160405180910390a35050565b610284816105f1565b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fd288ab5da2e1f37cf384a1565a3f905ad289b092fbdd31950dbbfef148c04f8860405160405180910390a350565b6102eb8282610741565b81816040516102fb929190610c17565b60405180910390203373ffffffffffffffffffffffffffffffffffffffff167f75dcdde27b71b9c529ae8b02072e1eeda244662d2d9c2effea5a1afb8fc913f360405160405180910390a35050565b610352610795565b61035c6000610813565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60016020528160005260406000206020528060005260406000206000915091509054906101000a900460ff1681565b60006103c283836108d7565b905092915050565b6103d2610795565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610441576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043890610cb3565b60405180910390fd5b61044a81610813565b50565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036104bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b390610d1f565b60405180910390fd5b6104c633826108d7565b15610506576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fd90610db1565b60405180910390fd5b60018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60005b828290508110156105ec576105db8383838181106105c1576105c0610dd1565b5b90506020020160208101906105d691906109db565b61044d565b806105e590610e39565b90506105a0565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610660576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065790610d1f565b60405180910390fd5b61066a33826108d7565b6106a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a090610ef3565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555050565b60005b828290508110156107905761077f83838381811061076557610764610dd1565b5b905060200201602081019061077a91906109db565b6105f1565b8061078990610e39565b9050610744565b505050565b61079d61096b565b73ffffffffffffffffffffffffffffffffffffffff166107bb61035e565b73ffffffffffffffffffffffffffffffffffffffff1614610811576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080890610f5f565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600033905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109a88261097d565b9050919050565b6109b88161099d565b81146109c357600080fd5b50565b6000813590506109d5816109af565b92915050565b6000602082840312156109f1576109f0610973565b5b60006109ff848285016109c6565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610a2d57610a2c610a08565b5b8235905067ffffffffffffffff811115610a4a57610a49610a0d565b5b602083019150836020820283011115610a6657610a65610a12565b5b9250929050565b60008060208385031215610a8457610a83610973565b5b600083013567ffffffffffffffff811115610aa257610aa1610978565b5b610aae85828601610a17565b92509250509250929050565b610ac38161099d565b82525050565b6000602082019050610ade6000830184610aba565b92915050565b60008060408385031215610afb57610afa610973565b5b6000610b09858286016109c6565b9250506020610b1a858286016109c6565b9150509250929050565b60008115159050919050565b610b3981610b24565b82525050565b6000602082019050610b546000830184610b30565b92915050565b600081905092915050565b6000819050919050565b610b788161099d565b82525050565b6000610b8a8383610b6f565b60208301905092915050565b6000610ba560208401846109c6565b905092915050565b6000602082019050919050565b6000610bc68385610b5a565b9350610bd182610b65565b8060005b85811015610c0a57610be78284610b96565b610bf18882610b7e565b9750610bfc83610bad565b925050600181019050610bd5565b5085925050509392505050565b6000610c24828486610bba565b91508190509392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610c9d602683610c30565b9150610ca882610c41565b604082019050919050565b60006020820190508181036000830152610ccc81610c90565b9050919050565b7f57686974656c6973743a3a205a65726f20616464726573730000000000000000600082015250565b6000610d09601883610c30565b9150610d1482610cd3565b602082019050919050565b60006020820190508181036000830152610d3881610cfc565b9050919050565b7f57686974656c6973743a3a204163636f756e7420697320616c7265616479207760008201527f686974656c697374656400000000000000000000000000000000000000000000602082015250565b6000610d9b602a83610c30565b9150610da682610d3f565b604082019050919050565b60006020820190508181036000830152610dca81610d8e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000819050919050565b6000610e4482610e2f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610e7657610e75610e00565b5b600182019050919050565b7f57686974656c6973743a3a204163636f756e74206973206e6f7420776869746560008201527f6c69737465640000000000000000000000000000000000000000000000000000602082015250565b6000610edd602683610c30565b9150610ee882610e81565b604082019050919050565b60006020820190508181036000830152610f0c81610ed0565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610f49602083610c30565b9150610f5482610f13565b602082019050919050565b60006020820190508181036000830152610f7881610f3c565b905091905056fea264697066735822122035060e9006a113ee4e0899b518d4b6cf3d47908bf6d88c7c5bf44b4133c4433864736f6c63430008110033";

type WhitelistConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WhitelistConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Whitelist__factory extends ContractFactory {
  constructor(...args: WhitelistConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Whitelist> {
    return super.deploy(overrides || {}) as Promise<Whitelist>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Whitelist {
    return super.attach(address) as Whitelist;
  }
  override connect(signer: Signer): Whitelist__factory {
    return super.connect(signer) as Whitelist__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WhitelistInterface {
    return new utils.Interface(_abi) as WhitelistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Whitelist {
    return new Contract(address, _abi, signerOrProvider) as Whitelist;
  }
}
